{"version":3,"file":"ScrollableContainer-Fsd3TffR.js","sources":["../../src/Components/Content/GameList/ScrollableContainer/ScrollableContainer.tsx"],"sourcesContent":["import React from 'react';\nimport styles from './ScrollableContainer.module.css'\nimport { useRef, useState, useEffect } from \"react\";\n\ninterface GameData {\n    id: number;\n    imgSrc: string;\n    altText: string;\n}\n\nconst gamesList: GameData[] = [\n    { id: 0, imgSrc: './Destiny2.2.png', altText: 'Destiny 2' },\n    { id: 1, imgSrc: './MW2.png', altText: 'Modern Warfare 2' },\n    { id: 2, imgSrc: './CallOfDutyWarzone.png', altText: 'Call of Duty Warzone' },\n    { id: 3, imgSrc: './CallOfDutyBlackOps6.png', altText: 'Call of Duty Black Ops' },\n    { id: 4, imgSrc: './CallOfDutyMW3.png', altText: 'Call of Duty MW3' },\n    { id: 5, imgSrc: './spaceMarine.png', altText: 'Space Marine' },\n    { id: 6, imgSrc: './pugolo.png', altText: 'Pugolo' },\n];\n\ntype ScrollableContainerPropsType = {\n    currentCardHandler: (index: number) => void,\n    isTransitioning?: boolean\n}\n\nconst ScrollableContainer: React.FC<ScrollableContainerPropsType> = React.memo(({ currentCardHandler, isTransitioning }) => {\n    const listRef = useRef<HTMLUListElement>(null);\n    const containerRef = useRef<HTMLDivElement>(null);\n    const [currentIndex, setCurrentIndex] = useState(gamesList.length);\n    const [highlightedIndex, setHighlightedIndex] = useState(gamesList.length + 1);\n    const [isAnimating, setIsAnimating] = useState(false);\n    const [prevHighlightedIndex, setPrevHighlightedIndex] = useState(gamesList.length);\n    const [scrollDirection, setScrollDirection] = useState<'next' | 'prev' | null>(null);\n    const [currentGameIndex, setCurrentGameIndex] = useState(0);\n    const [visibleCardCount, setVisibleCardCount] = useState(5);\n    const [isButtonClicked, setIsButtonClicked] = useState(false);\n\n    const extendedItems = [...gamesList, ...gamesList, ...gamesList];\n\n    const calculateVisibleCards = () => {\n        if (containerRef.current && listRef.current) {\n            const containerWidth = containerRef.current.clientWidth;\n            const items = listRef.current.querySelectorAll(`.${styles.item}`);\n            if (items.length > 0) {\n                const itemWidth = items[0].getBoundingClientRect().width;\n                const itemMargin = 15;\n                \n                const maxVisibleCards = Math.floor(containerWidth / (itemWidth + itemMargin));\n                setVisibleCardCount(maxVisibleCards);\n            }\n        }\n    };\n\n    useEffect(() => {\n        calculateVisibleCards();\n        \n        const handleResize = () => {\n            calculateVisibleCards();\n        };\n\n        window.addEventListener('resize', handleResize);\n        return () => {\n            window.removeEventListener('resize', handleResize);\n        };\n    }, []);\n\n    useEffect(() => {\n        if (listRef.current) {\n            const items = listRef.current.querySelectorAll(`.${styles.item}`);\n            if (items.length > 0) {\n                const itemWidth = items[0].getBoundingClientRect().width;\n                const marginRight = 10;\n                listRef.current.style.transform = `translateX(-${currentIndex * (itemWidth + marginRight)}px)`;\n            }\n        }\n    }, []);\n\n    useEffect(() => {\n        if (!isAnimating && !isTransitioning) {\n            const targetIndex = gamesList.length + currentGameIndex;\n            setHighlightedIndex(targetIndex + 1);\n            setCurrentIndex(targetIndex);\n            \n            if (listRef.current) {\n                const items = listRef.current.querySelectorAll(`.${styles.item}`);\n                if (items.length > 0) {\n                    const itemWidth = items[0].getBoundingClientRect().width;\n                    const marginRight = 20;\n                    listRef.current.style.transition = 'transform 0.3s ease';\n                    listRef.current.style.transform = `translateX(-${(targetIndex * (itemWidth + marginRight)) - 20}px)`;\n                }\n            }\n        }\n    }, [currentGameIndex, isAnimating, isTransitioning]);\n\n    const handleCardChange = (nextIndex: number, nextHighlightedIndex: number, direction: 'next' | 'prev') => {\n        if (isAnimating || isTransitioning || !listRef.current) return;\n        \n        setIsAnimating(true);\n        setScrollDirection(direction);\n        setPrevHighlightedIndex(highlightedIndex);\n        \n        const items = listRef.current.querySelectorAll(`.${styles.item}`);\n        if (items.length > 0) {\n            const itemWidth = items[0].getBoundingClientRect().width;\n            const marginRight = 20;\n            \n            if (nextIndex >= gamesList.length * 2) {\n                nextIndex = gamesList.length;\n                nextHighlightedIndex = gamesList.length + 1;\n                listRef.current.style.transition = 'none';\n                listRef.current.style.transform = `translateX(-${nextIndex * (itemWidth + marginRight)}px)`;\n                void listRef.current.offsetHeight;\n                listRef.current.style.transition = 'transform 0.3s ease';\n            }\n            else if (nextIndex < gamesList.length) {\n                nextIndex = gamesList.length * 2 - 1;\n                nextHighlightedIndex = gamesList.length * 2;\n                listRef.current.style.transition = 'none';\n                listRef.current.style.transform = `translateX(-${nextIndex * (itemWidth + marginRight)}px)`;\n                void listRef.current.offsetHeight;\n                listRef.current.style.transition = 'transform 0.3s ease';\n            }\n\n            setCurrentIndex(nextIndex);\n            setHighlightedIndex(nextHighlightedIndex);\n            \n            const actualGameIndex = (nextHighlightedIndex - 1) % gamesList.length;\n            setCurrentGameIndex(actualGameIndex);\n            currentCardHandler(actualGameIndex);\n            \n            listRef.current.style.transform = `translateX(-${(nextIndex * (itemWidth + marginRight)) - 20}px)`;\n        }\n\n        setTimeout(() => {\n            setIsAnimating(false);\n            setScrollDirection(null);\n        }, 300);\n    };\n\n    const handleNextClick = () => {\n        setIsButtonClicked(true);\n        const nextIndex = currentIndex + 1;\n        const nextHighlightedIndex = highlightedIndex + 1;\n        handleCardChange(nextIndex, nextHighlightedIndex, 'next');\n        setTimeout(() => {\n            setIsButtonClicked(false);\n        }, 300);\n    };\n\n    const handlePrevClick = () => {\n        setIsButtonClicked(true);\n        const nextIndex = currentIndex - 1;\n        const nextHighlightedIndex = highlightedIndex - 1;\n        handleCardChange(nextIndex, nextHighlightedIndex, 'prev');\n        setTimeout(() => {\n            setIsButtonClicked(false);\n        }, 300);\n    };\n\n    const handleCardClick = (index: number) => {\n        if (isAnimating || isTransitioning) return;\n        \n        const actualGameIndex = index % gamesList.length;\n        \n        if (actualGameIndex === currentGameIndex) return;\n        \n        const targetIndex = gamesList.length + actualGameIndex;\n        \n        const direction = actualGameIndex > currentGameIndex ? 'next' : 'prev';\n        \n        setIsAnimating(true);\n        setScrollDirection(direction);\n        setPrevHighlightedIndex(highlightedIndex);\n        \n        if (listRef.current) {\n            const items = listRef.current.querySelectorAll(`.${styles.item}`);\n            if (items.length > 0) {\n                const itemWidth = items[0].getBoundingClientRect().width;\n                const marginRight = 20;\n                \n                listRef.current.style.transition = 'transform 0.3s ease';\n                listRef.current.style.transform = `translateX(-${(targetIndex * (itemWidth + marginRight)) - 20}px)`;\n                \n                setCurrentIndex(targetIndex);\n                setHighlightedIndex(targetIndex + 1);\n                setCurrentGameIndex(actualGameIndex);\n                \n                currentCardHandler(actualGameIndex);\n            }\n        }\n        \n        setTimeout(() => {\n            setIsAnimating(false);\n            setScrollDirection(null);\n        }, 300);\n    };\n\n    useEffect(() => {\n        if (listRef.current) {\n            const items = listRef.current.querySelectorAll(`.${styles.item}`);\n            if (items.length > 0) {\n                const itemWidth = items[0].getBoundingClientRect().width;\n                const marginRight = 10;\n                listRef.current.style.transform = `translateX(-${(currentIndex * (itemWidth + marginRight)) - 20}px)`;\n            }\n        }\n        \n        handleNextClick();\n    }, []);\n\n    return (\n        <div className={styles.container} ref={containerRef}>\n            <div className={`${styles.scrollableContainer} ${styles.adjustedContainer}`}>\n                <ul className={styles.list} ref={listRef}>\n                    {extendedItems.map((item, index) => {\n                        const isExiting = isAnimating && scrollDirection === 'next' && index === prevHighlightedIndex - 1;\n                        const isEntering = isAnimating && scrollDirection === 'next' && index === highlightedIndex;\n                        const isPrevExiting = isAnimating && scrollDirection === 'prev' && index === prevHighlightedIndex;\n                        const isPrevEntering = isAnimating && scrollDirection === 'prev' && index === highlightedIndex - 1;\n                        \n                        const isCurrentGame = (index % gamesList.length) === currentGameIndex && index === highlightedIndex - 1;\n                        \n                        const isFirstItem = index === highlightedIndex - 2;\n                        const relativeIndex = index - (highlightedIndex - 1);\n                        const isFullyVisible = relativeIndex >= 0 && relativeIndex < visibleCardCount;\n                        const visibilityClass = isFullyVisible ? '' : styles.notFullyVisible;\n                        \n                        return (\n                            <li\n                                key={`${item.id}-${index}`}\n                                className={`\n                                    ${styles.item} \n                                    ${index === highlightedIndex - 1 ? styles.firstVisible : ''} \n                                    ${index === highlightedIndex ? styles.nextItem : ''}\n                                    ${isFirstItem ? styles.firstItem : ''}\n                                    ${isExiting ? styles.exiting : ''}\n                                    ${isEntering ? styles.entering : ''}\n                                    ${isPrevExiting ? styles.prevExiting : ''}\n                                    ${isPrevEntering ? styles.prevEntering : ''}\n                                    ${isCurrentGame ? styles.currentGame : ''}\n                                    ${visibilityClass}\n                                `}\n                                onClick={() => handleCardClick(index)}\n                                role=\"button\"\n                                tabIndex={0}\n                                onKeyDown={(e) => {\n                                    if (e.key === 'Enter' || e.key === ' ') {\n                                        e.preventDefault();\n                                        handleCardClick(index);\n                                    }\n                                }}\n                            >\n                                <div className={styles.gameCard}>\n                                    <img \n                                        className={`${styles.img} ${index !== highlightedIndex - 1 ? styles.dimmed : ''}`} \n                                        src={item.imgSrc} \n                                        alt={item.altText} \n                                    />\n                                </div>\n                            </li>\n                        );\n                    })}\n                </ul>\n            </div>\n            <button\n                className={`${styles.scrollButton} ${styles.scrollButtonRight} ${isButtonClicked ? styles.buttonClicked : ''}`}\n                onClick={handleNextClick}\n                aria-label=\"Scroll right\"\n                type=\"button\"\n                tabIndex={0}\n                style={{\n                    WebkitTapHighlightColor: 'transparent',\n                    WebkitAppearance: 'none',\n                    MozAppearance: 'none'\n                }}\n            >\n                <svg \n                    width=\"32\" \n                    height=\"32\" \n                    viewBox=\"0 0 24 24\" \n                    fill=\"none\" \n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    className={styles.arrowIcon}\n                >\n                    <path \n                        d=\"M9 6L15 12L9 18\" \n                        stroke=\"white\" \n                        strokeWidth=\"3\" \n                        strokeLinecap=\"round\" \n                        strokeLinejoin=\"round\"\n                    />\n                </svg>\n            </button>\n            <button\n                className={`${styles.scrollButton} ${styles.scrollButtonLeft}`}\n                onClick={handlePrevClick}\n                aria-label=\"Scroll left\"\n                type=\"button\"\n                tabIndex={0}\n                style={{\n                    WebkitTapHighlightColor: 'transparent',\n                    WebkitAppearance: 'none',\n                    MozAppearance: 'none',\n                    display: 'none'\n                }}\n            >\n                <svg \n                    width=\"32\" \n                    height=\"32\" \n                    viewBox=\"0 0 24 24\" \n                    fill=\"none\" \n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    className={styles.arrowIcon}\n                >\n                    <path \n                        d=\"M15 6L9 12L15 18\" \n                        stroke=\"white\" \n                        strokeWidth=\"3\" \n                        strokeLinecap=\"round\" \n                        strokeLinejoin=\"round\"\n                    />\n                </svg>\n            </button>\n        </div>\n    );\n});\n\nexport default ScrollableContainer;"],"names":["gamesList","ScrollableContainer","React","currentCardHandler","isTransitioning","listRef","useRef","containerRef","currentIndex","setCurrentIndex","useState","highlightedIndex","setHighlightedIndex","isAnimating","setIsAnimating","prevHighlightedIndex","setPrevHighlightedIndex","scrollDirection","setScrollDirection","currentGameIndex","setCurrentGameIndex","visibleCardCount","setVisibleCardCount","isButtonClicked","setIsButtonClicked","extendedItems","calculateVisibleCards","containerWidth","items","styles","itemWidth","maxVisibleCards","useEffect","handleResize","marginRight","targetIndex","handleCardChange","nextIndex","nextHighlightedIndex","direction","actualGameIndex","handleNextClick","handlePrevClick","handleCardClick","index","jsx","item","isExiting","isEntering","isPrevExiting","isPrevEntering","isCurrentGame","isFirstItem","relativeIndex","visibilityClass","e"],"mappings":"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"}